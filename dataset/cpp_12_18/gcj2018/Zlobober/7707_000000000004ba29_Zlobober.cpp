#include <vector>
#include <map>
#include <cassert>
#include <set>
#include <algorithm>
#include <cstdio>
using namespace std;

struct graph {
    vector<vector<int>> E;
    vector<vector<int>> byD;
};

map<vector<pair<int, int>>, vector<int>> used;

vector<pair<int, int>> tolst(graph g) {
    int n = 10;
    vector<pair<int, int>> lst;
    for (int i = 0; i < n; i++) {
        for (int j : g.E[i]) {
            lst.emplace_back(i, j);
        }
    }
    sort(lst.begin(), lst.end());
    return lst;
}

bool checkOrCache(graph g) {
    vector<pair<vector<pair<int, int>>, vector<int>>> reprs;
    vector<int> pi;
    vector<pair<int, int>> lst = tolst(g);
    if (used.count(lst)) {
        return false;
    }
    int n = 10;
    for (int i = 0; i < n; i++) {
        pi.push_back(i);
    }
    int perms = 0;
    do {
        ++perms;
        vector<pair<int, int>> nlst;
        for (auto& pr : lst) {
            nlst.emplace_back(pi[pr.first], pi[pr.second]);
        }
        sort(nlst.begin(), nlst.end());
        reprs.emplace_back(move(nlst), pi);
    } while (next_permutation(pi.begin(), pi.end()));
    sort(reprs.begin(), reprs.end());
    reprs.resize(unique(reprs.begin(), reprs.end(), [] (pair<vector<pair<int, int>>, vector<int>> lhs, pair<vector<pair<int, int>>, vector<int>> rhs) -> bool { return lhs.first == rhs.first; }) - reprs.begin());
    for (auto& repr : reprs) {
        used.emplace(repr);
    }
    fprintf(stderr, "cached %d\n", (int)reprs.size());
    while(true);
    if ((int)reprs.size() < perms) {
        return false;
    } else {
        return true;
    }
}

graph globans;

/*bool  go(vector<int>& deg, graph& g, int i, int j) {
    if (i == 10) {
        if (*min_element(deg.begin(), deg.end()) != 4) {
            return false;
        }
        if (checkOrCache(g)) {
            globans = g;
            return true;
        }
        return false;
    }
    if (j == 10) {
        return go(deg, g, i + 1, i + 2);
    }
    if (go(deg, g, i, j + 1)) {
        return true;
    }
    if (deg[i] <= 3 && deg[j] <= 3) {
        deg[i]++;
        deg[j]++;
        g.E[i].push_back(j);
        g.E[j].push_back(i);
        if (go(deg, g, i, j + 1)) {
            return true;
        }
        g.E[i].pop_back();
        g.E[j].pop_back();
        deg[i]--;
        deg[j]--;
    }
    return false;
}*/

void init10() {
    vector<int> deg(10, 0);
    graph g;
    g.E.resize(10);
    vector<pair<int, int>> lst = {
        {0, 1}, {0, 2}, {0, 3}, {0, 4},
        {1, 2}, {2, 3}, {3, 4},
        {1, 7}, {1, 9},
        {2, 5}, {3, 6},
        {4, 8}, {4, 9},
        {5, 6}, {5, 7}, {5, 8},
        {6, 7}, {6, 9},
        {7, 8}, {8, 9}};
    assert(lst.size() == 20);
    for (auto pr : lst) {
        int a, b;
        a = pr.first;
        b = pr.second;
        g.E[a].push_back(b);
        g.E[b].push_back(a);
    }
    //assert(checkOrCache(g));
    globans = g;
}

void solve10()
{
    int n = 10;
    printf("%d\n", n);
    vector<pair<int, int>> origlst = {
        {0, 1}, {0, 2}, {0, 3}, {0, 4},
        {1, 2}, {2, 3}, {3, 4},
        {1, 7}, {1, 9},
        {2, 5}, {3, 6},
        {4, 8}, {4, 9},
        {5, 6}, {5, 7}, {5, 8},
        {6, 7}, {6, 9},
        {7, 8}, {8, 9}};
    set<pair<int, int>> origset(origlst.begin(), origlst.end());
    for (int i = 0; i < 2 * n; i++) {
        printf("%d %d\n", origlst[i].first + 1, origlst[i].second + 1);
    }
    fflush(stdout);
    int nn = 10;
    scanf("%d", &nn);
    assert(nn == n);
    vector<pair<int, int>> newlst;
    for (int i = 0; i < 2 * n; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        --a, --b;
        newlst.emplace_back(a, b);
    }
    auto newset = set<pair<int, int>>(newlst.begin(), newlst.end());
    vector<int> perm;
    for (int i = 0; i < n; i++) {
        perm.push_back(i);
    }
    vector<int> ans;
    do {
        bool bad = false;
        for (int i = 0; i < 2 * n; i++) {
            int a, b;
            a = origlst[i].first, b= origlst[i].second;
            if (newset.count({perm[a], perm[b]}) == 0 && newset.count({perm[b], perm[a]}) == 0) {
                bad = true;
                break;
            }
        }
        if (!bad) {
            ans = perm;
            break;
        }
    } while (next_permutation(perm.begin(), perm.end()));
    assert(!ans.empty());
    for (int i = 0; i < n; i++) {
        printf("%d ", ans[i] + 1);
    }
    printf("\n");
    fflush(stdout);
}

vector<vector<int>> getByD(graph g) {
    int n = g.E.size();
    vector<vector<int>> D(n, vector<int>(n, 1000));
    for (int i = 0; i < n; i++) {
        D[i][i] = 0;
    }
    for (int i = 0; i < n; i++) {
        for (int j : g.E[i]) {
            D[i][j] = D[j][i] = 1;
        }
    }
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
            }
        }
    }
    vector<vector<int>> byD;
    byD.assign(n, vector<int>(n + 1, 0));
    for (int it = 0; it < 10; it++) {
        vector<int> val(n, 1);
        for (int j = 0; j < n; j++) {
            for (int k = 0; k <= n; k++) {
                val[j] += byD[j][k] * byD[j][k];
            }
        }
        byD.assign(n, vector<int>(n + 1, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int d = D[i][j];
                byD[i][d] += val[j];
                byD[j][d] += val[i];
            }
        }
    }
    return byD;
}

graph rndg(int n) {
    graph g;
    while (true) {
        g.E.assign(n, {});
        g.byD.assign(n, {});
        vector<int> inc;
        for (int i = 0; i < n; i++) {
            inc.push_back(i);
        }
        vector<vector<int>> D(n, vector<int>(n, 1000));
        for (int i = 0; i < 2 * n; i++) {
            if (inc.size() == 1) {
                break;
            }
            int a = -1, b = -1, va, vb;
            int it;
            for (it = 0; it < max(1, n * n); it++) {
                a = rand() % inc.size();
                b = rand() % (inc.size() - 1);
                if (b >= a) {
                    ++b;
                }
                if (a > b) {
                    swap(a, b);
                }
                va = inc[a];
                vb = inc[b];
                if (D[va][vb] == 1) {
                    continue;
                }
                break;
            }
            if (it == n * n) {
                break;
            }
            g.E[va].push_back(vb);
            g.E[vb].push_back(va);
            D[va][vb] = D[vb][va] = 1;
            if (g.E[vb].size() == 4) {
                swap(inc[b], inc.back());
                inc.pop_back();
            }
            if (g.E[va].size() == 4) {
                swap(inc[a], inc.back());
                inc.pop_back();
            }
        }
        if (!inc.empty()) {
            //fprintf(stderr, "fail3\n");
            continue;
        }
        for (int i = 0; i < n; i++) {
            D[i][i] = 0;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
                }
            }
        }
        bool bad = false;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (D[i][j] > 500) {
                    bad = true;
                }
            }
        }
        if (bad) {
            //fprintf(stderr, "fail1\n");
            continue;
        }
        auto& byD = g.byD;
        byD.assign(n, vector<int>(n + 1, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int d = D[i][j];
                byD[i][d]++;
                byD[j][d]++;
            }
        }
        auto cp = byD;
        sort(cp.begin(), cp.end());
        if (unique(cp.begin(), cp.end()) != cp.end()) {
            static int it = 0;
            ++it;
            fprintf(stderr, "fail2 %d\n", it);
            continue;
        }
        break;
    }
    printf("{");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d,", g.E[i][j]);
        }
    }
    printf("}\n");
    return g;
}

vector<vector<int>> lsts = {
{6,8,10,7,5,4,3,2,3,1,7,5,7,8,2,1,6,8,9,1,1,6,9,2,0,4,5,10,3,9,0,2,4,0,3,10,10,5,7,4,9,6,0,8,},
{8,11,4,3,4,5,6,3,9,5,6,10,7,1,0,4,1,11,0,3,9,1,2,7,1,2,11,8,3,10,8,5,0,6,7,10,10,5,11,2,9,7,2,8,9,4,6,0,},
{11,12,8,9,8,2,11,5,1,8,3,6,10,2,12,4,10,9,3,5,8,6,1,4,9,7,5,2,11,9,10,6,1,2,0,5,6,7,0,4,12,4,3,7,0,7,12,1,0,10,11,3,},
{3,13,5,12,10,2,8,13,1,4,7,11,10,0,6,7,9,2,6,10,8,6,0,13,4,9,3,5,2,3,13,12,1,11,5,9,4,6,12,8,1,3,4,11,8,2,10,12,11,9,0,7,1,0,5,7,},
{8,9,11,7,3,5,12,6,6,7,13,14,8,1,9,5,13,10,12,14,12,1,13,3,2,7,13,1,2,6,11,0,3,0,10,11,3,0,12,10,9,4,14,8,0,14,7,8,5,9,4,1,4,2,5,6,2,11,10,4,},
{12,8,9,6,4,14,13,7,9,14,3,11,15,9,5,2,1,5,12,14,4,3,6,13,5,10,0,15,10,14,1,11,9,0,12,11,8,2,3,0,7,11,6,15,7,8,2,10,4,0,13,8,1,15,12,5,1,2,4,7,3,13,6,10,},
{13,8,14,5,6,15,12,11,8,7,4,9,4,6,16,7,16,12,2,3,11,10,7,0,12,1,3,10,2,3,14,5,2,9,0,15,2,8,13,16,6,5,13,15,5,12,16,1,6,4,11,1,0,14,10,9,7,15,13,0,1,14,8,10,4,3,9,11,},
{4,5,11,16,3,14,17,16,15,9,13,7,14,10,1,13,15,7,14,0,13,6,0,16,8,14,5,12,15,4,2,9,6,15,17,16,11,17,2,7,13,12,11,3,9,10,12,0,10,11,17,6,10,5,3,2,6,3,1,4,4,7,2,8,8,5,0,1,8,9,12,1,},
{11,15,16,12,2,14,8,5,17,1,10,18,8,17,18,14,11,7,13,15,1,15,8,9,14,17,16,11,10,13,4,18,3,1,17,5,12,5,10,13,7,13,2,9,0,6,16,4,9,18,15,0,10,7,9,4,1,6,16,3,5,0,12,4,14,6,11,0,2,8,3,6,2,3,12,7,},
{18,17,6,19,7,11,9,6,10,13,8,7,16,17,11,14,9,17,14,12,17,15,10,18,12,1,14,0,9,13,1,2,13,2,19,16,7,12,4,1,2,11,5,15,10,3,16,1,6,9,19,4,8,7,2,16,3,15,4,6,5,14,18,10,3,11,8,13,3,5,4,0,0,15,5,19,8,12,0,18,},
{2,10,11,3,7,15,16,4,8,11,7,0,7,5,0,18,9,18,1,12,3,9,14,12,20,19,14,15,1,3,2,18,16,2,17,13,16,12,4,5,13,20,0,11,2,19,0,10,9,4,5,15,10,17,14,8,17,6,13,5,1,19,6,12,9,8,17,1,16,8,14,13,4,20,7,3,20,15,6,11,19,6,18,10,},
{15,16,10,2,20,15,7,4,8,0,10,5,11,14,8,12,18,21,6,1,13,6,2,7,5,19,4,14,5,1,18,12,2,16,3,9,11,17,18,8,18,0,13,2,3,9,13,19,7,3,14,17,5,15,10,11,3,6,17,12,0,13,1,21,19,0,8,20,9,21,14,12,4,10,7,9,16,11,20,6,1,19,16,21,4,15,20,17,},
{8,20,3,18,11,7,12,2,12,19,3,1,6,0,2,4,9,6,3,19,15,11,10,13,14,16,3,4,17,1,22,19,0,16,22,9,4,17,18,8,11,15,14,5,10,1,5,21,2,20,13,1,17,21,12,5,6,15,20,10,10,5,14,16,6,8,22,15,7,9,13,20,22,9,0,21,7,2,21,4,12,17,14,0,13,18,19,11,7,16,18,8,},
{7,17,11,1,10,9,23,0,9,17,18,22,15,14,23,12,13,14,19,22,15,11,16,21,21,8,19,16,0,13,19,20,22,21,6,23,2,1,23,18,1,12,15,20,18,12,0,5,10,11,3,20,4,7,20,16,17,4,15,3,3,5,14,10,5,18,13,6,0,2,14,22,2,11,9,16,4,21,7,6,10,12,13,7,8,19,6,5,17,8,4,2,9,3,1,8,},
{24,9,14,6,8,14,9,4,20,7,5,12,4,16,5,10,19,22,3,1,2,10,3,9,9,12,0,24,18,2,17,11,23,11,1,14,1,5,0,6,11,21,5,3,13,8,10,7,20,2,6,21,11,24,23,19,21,8,1,0,20,19,23,18,22,18,17,3,22,7,16,21,7,22,16,15,15,4,20,13,2,12,15,19,10,14,17,12,16,17,18,4,8,13,15,24,13,0,23,6,},
{10,24,2,18,12,8,10,24,7,20,25,0,13,18,9,11,20,22,21,17,25,19,11,8,15,23,18,16,17,25,2,22,25,19,5,1,15,3,14,23,0,15,14,1,19,5,3,17,20,22,1,13,3,14,19,12,13,9,10,21,20,6,9,10,18,23,6,17,7,11,4,16,16,3,0,6,11,13,8,5,15,2,12,4,22,24,4,14,12,21,4,7,6,24,16,9,0,23,21,1,7,8,2,5,},
{23,4,13,21,14,9,25,6,13,25,4,14,23,24,26,20,22,2,0,15,18,15,13,22,8,11,1,14,11,25,16,17,6,9,12,20,8,18,1,11,18,19,26,22,6,7,9,12,8,22,11,16,5,2,0,26,1,15,2,6,5,14,24,4,19,17,7,12,18,19,16,7,17,5,10,9,23,16,17,10,23,3,21,8,24,20,0,26,4,5,12,10,19,3,0,20,25,3,21,15,24,2,7,1,3,10,13,21,},
{24,1,18,23,26,11,0,17,5,9,6,24,27,17,18,11,27,20,10,6,2,19,22,14,8,19,2,4,24,23,20,19,6,19,14,13,26,2,16,21,13,16,15,4,1,18,24,3,25,27,15,18,10,14,20,8,5,13,8,20,17,10,22,12,10,23,9,25,15,3,1,26,11,12,0,3,6,5,7,8,4,7,13,14,23,27,9,25,26,5,15,25,16,21,7,0,0,2,11,7,12,22,16,21,9,1,22,17,4,3,21,12,},
{17,24,4,12,9,21,16,15,9,12,5,8,20,17,27,28,27,22,0,11,19,22,2,7,8,19,25,13,28,5,26,25,19,6,18,2,2,1,16,21,16,15,13,19,25,18,4,15,2,24,0,28,10,23,6,14,18,25,13,23,10,26,11,1,10,21,9,1,3,0,18,20,17,11,8,14,8,6,5,10,3,17,23,27,24,16,1,9,26,4,5,28,20,13,14,26,0,21,27,12,11,6,7,14,22,15,7,23,4,3,20,24,3,7,12,22,},
{21,9,8,23,27,12,5,23,6,13,14,24,7,6,9,5,13,10,17,16,3,22,1,14,2,3,11,25,3,12,10,22,0,26,18,25,0,3,18,11,4,16,7,18,14,6,9,25,27,7,1,16,4,2,15,27,11,2,19,5,21,13,28,29,26,10,4,12,20,26,4,24,8,10,29,9,24,14,28,25,17,21,23,22,0,15,23,20,29,5,7,20,0,21,20,1,29,17,19,2,8,19,6,11,16,28,8,17,1,12,28,13,26,27,15,19,24,22,18,15,},
{17,21,12,20,17,15,30,3,14,6,10,29,26,8,1,30,17,5,15,8,19,14,4,24,29,2,23,16,13,29,24,27,11,3,25,4,13,26,11,20,17,2,23,25,8,27,21,9,13,21,0,15,7,9,12,22,2,26,5,22,1,12,4,18,30,6,18,28,10,1,4,0,16,25,22,15,26,23,5,30,28,27,0,9,23,12,0,11,24,14,18,13,19,21,6,10,7,22,25,5,18,10,24,8,3,19,14,9,28,7,11,20,20,27,29,16,7,6,28,2,16,19,1,3,},
{17,22,2,8,27,23,16,31,14,0,15,27,6,24,8,31,6,12,10,15,7,19,9,21,18,3,4,29,5,9,20,29,3,22,29,0,7,23,5,25,13,16,21,4,22,31,24,30,13,4,16,25,10,26,12,25,2,26,20,23,19,2,21,4,1,10,23,12,19,0,31,21,6,30,24,28,17,5,26,15,7,28,14,24,5,17,15,10,0,11,8,29,9,1,14,16,3,20,18,11,27,13,12,9,13,14,19,30,1,28,25,2,30,20,27,18,7,6,8,22,28,18,11,26,17,3,11,1,},
{17,27,12,4,23,14,25,30,9,31,7,26,14,11,24,10,0,31,15,5,28,12,20,4,28,20,29,14,10,24,2,16,12,32,21,23,2,16,21,22,3,7,20,19,3,23,18,21,22,8,5,0,25,27,18,16,3,6,17,1,24,22,4,26,9,29,7,13,0,14,20,19,24,11,13,29,29,30,10,17,6,10,17,5,8,9,11,25,12,31,9,15,32,1,11,8,3,18,15,7,13,32,21,1,27,32,15,2,13,26,28,0,6,5,27,30,6,16,18,19,28,19,1,31,22,2,4,30,23,8,25,26,},
{31,22,8,9,24,29,17,32,26,19,7,10,24,6,33,23,28,24,5,15,31,14,4,11,30,19,13,3,17,2,32,14,16,27,18,0,27,26,11,0,22,2,28,16,19,18,9,5,28,33,21,25,31,6,17,18,20,5,7,21,27,16,25,4,8,15,21,10,13,7,23,1,11,8,13,28,29,11,6,2,22,14,33,23,16,12,32,14,20,10,25,0,30,17,3,20,1,29,4,3,30,22,15,12,32,9,2,29,30,9,15,8,4,12,18,10,19,1,24,26,27,6,23,25,0,33,13,5,26,7,1,21,31,20,12,3,},
{6,23,18,11,28,23,15,24,13,27,25,10,11,4,5,31,21,20,15,3,31,29,3,25,33,21,22,0,32,9,27,10,22,32,34,33,30,7,14,18,32,33,2,7,3,0,21,24,16,26,20,19,2,28,34,23,9,16,29,19,29,34,4,1,26,12,14,31,20,19,31,29,0,30,9,33,24,14,12,17,25,4,12,17,4,22,6,11,8,24,21,6,27,0,1,13,22,19,11,1,20,2,28,5,16,30,12,28,2,23,34,7,1,13,25,26,15,5,14,17,9,32,26,18,5,17,3,16,8,7,10,30,6,10,8,18,13,15,8,27,},
{4,28,13,10,15,16,25,5,19,21,26,7,9,19,13,4,0,23,15,3,22,30,29,1,22,12,33,10,9,27,2,21,21,15,26,14,3,26,34,7,20,12,0,6,33,27,31,21,26,31,10,6,24,0,3,30,17,27,8,18,1,4,28,8,25,31,1,34,20,14,29,25,32,30,14,25,2,24,3,35,10,30,32,17,8,2,11,7,6,24,5,35,32,28,4,34,22,19,13,32,16,1,18,17,12,9,8,2,33,11,7,14,35,23,0,15,34,5,31,17,20,13,5,18,12,16,11,29,23,24,18,20,27,11,35,6,9,16,23,29,28,19,33,22,},
{33,28,19,6,27,12,8,4,13,22,14,3,23,18,2,9,36,26,32,1,27,15,34,14,36,17,31,0,34,35,11,25,15,23,17,1,22,35,10,3,18,12,26,9,19,7,36,18,21,1,10,35,24,32,2,29,25,2,5,35,20,26,8,5,27,28,32,30,8,29,6,25,19,10,3,11,18,11,0,25,28,15,34,31,12,34,30,29,27,36,9,2,3,8,31,24,13,33,23,29,14,7,17,19,15,4,30,10,1,22,16,5,33,20,0,16,13,17,24,21,16,21,31,26,23,20,30,6,33,13,16,4,32,28,0,24,7,20,21,5,7,14,9,12,22,4,11,6,},
{6,19,18,35,9,10,28,18,13,7,17,31,35,17,23,37,10,31,16,34,19,33,36,12,17,0,28,29,18,16,2,9,36,15,25,26,27,1,30,7,4,28,26,1,12,32,22,35,11,24,32,5,2,19,25,33,20,24,31,23,8,27,29,20,4,7,22,30,6,33,3,2,7,21,1,0,5,0,34,13,34,14,15,24,18,27,30,29,37,16,11,28,3,32,36,14,14,12,20,37,8,13,37,32,33,8,10,34,9,15,21,29,10,6,1,22,15,6,27,21,9,35,16,21,4,2,14,36,11,23,12,25,26,5,17,13,20,19,4,26,3,30,0,11,8,5,23,31,22,3,25,24,},
{31,26,37,20,37,34,15,10,32,14,29,30,26,20,38,24,13,24,26,8,36,22,9,30,16,13,11,7,6,34,27,23,25,4,21,27,18,29,23,5,14,1,17,35,14,30,6,31,31,37,20,15,6,38,4,30,11,2,10,32,22,37,1,12,6,20,31,18,32,33,10,19,9,28,35,16,23,35,17,27,16,0,3,12,38,35,33,8,15,5,24,36,19,26,9,7,4,29,22,3,28,8,34,38,0,23,3,4,7,19,33,8,32,36,18,25,9,24,34,2,11,13,5,2,0,16,11,12,28,2,17,14,36,17,27,21,1,7,29,25,19,18,10,21,5,28,22,33,15,1,0,12,13,21,3,25,},
{33,32,13,37,33,3,31,18,17,30,3,25,26,1,7,2,17,10,27,15,22,6,29,26,5,26,13,30,9,3,19,25,11,27,30,10,7,13,22,36,4,35,18,8,8,21,31,28,38,15,25,37,9,20,6,0,17,28,18,38,19,4,12,24,22,39,19,30,4,2,39,14,14,10,29,1,15,7,38,16,37,13,21,32,33,20,11,34,23,5,16,9,22,29,37,24,32,15,36,23,12,2,7,36,3,39,5,6,4,34,8,31,14,34,35,11,5,18,23,35,2,8,16,6,27,1,11,34,20,36,24,0,1,35,21,0,27,28,31,21,10,33,28,29,9,32,24,25,20,12,23,0,12,14,19,39,16,17,26,38,},
{36,26,28,40,11,30,9,40,16,14,23,35,17,24,36,7,25,16,8,31,7,13,38,9,13,8,25,33,5,16,20,3,6,26,23,4,18,12,1,5,20,36,23,31,38,18,1,21,25,9,31,22,6,38,37,5,27,21,2,22,29,35,25,22,7,2,18,4,20,3,40,21,28,11,16,9,39,35,29,34,17,30,10,7,23,14,11,17,33,14,15,12,21,2,8,10,3,29,32,39,15,4,6,12,8,38,33,0,28,14,32,30,27,18,37,0,15,24,19,34,20,27,35,1,33,12,4,10,24,40,27,37,31,22,26,6,29,19,39,37,15,19,2,30,0,3,10,39,28,32,13,34,11,26,13,5,24,36,19,34,32,17,0,1,},
{11,12,28,16,37,33,28,12,7,6,16,12,28,20,23,30,11,34,15,23,37,29,26,6,20,2,5,21,2,13,38,41,32,25,34,13,24,27,34,31,33,17,18,41,4,0,21,28,2,15,0,1,16,25,7,8,26,39,27,18,18,17,4,12,13,2,0,32,10,38,15,24,15,24,14,10,29,24,37,36,6,32,25,3,33,11,40,6,41,33,35,30,4,26,3,32,9,19,18,17,13,31,20,8,14,5,39,23,14,9,38,36,1,0,11,3,19,5,35,31,40,3,22,36,25,37,29,9,20,16,8,23,10,21,1,22,4,8,9,36,29,41,40,22,19,27,34,30,1,5,19,31,17,27,7,39,14,40,38,26,39,21,35,30,22,10,35,7,},
{10,14,31,18,25,41,34,18,31,14,17,5,20,39,4,22,7,36,24,3,16,37,2,18,12,24,42,19,30,4,40,33,20,21,10,16,16,14,37,41,0,42,8,34,38,39,33,17,6,13,29,14,12,30,32,22,12,2,9,0,17,35,21,29,5,9,8,41,15,2,11,41,25,1,5,0,42,20,6,33,8,35,19,3,40,15,8,27,31,23,13,3,40,32,33,22,26,25,6,4,1,38,24,18,34,24,28,38,32,30,31,21,26,29,36,35,28,12,34,15,7,36,13,27,22,2,27,0,37,13,23,27,11,7,23,19,26,29,1,10,40,15,20,28,39,4,28,30,32,38,5,9,11,25,26,37,42,11,36,3,23,35,7,21,1,16,9,17,39,19,6,10,},
{25,27,39,23,35,21,6,39,29,15,17,14,22,40,12,10,17,24,23,13,39,41,19,11,12,42,1,35,36,10,35,14,42,14,10,20,37,34,28,19,7,32,3,8,28,17,5,33,3,6,32,41,29,30,40,4,7,8,40,2,41,30,2,31,38,20,31,21,4,2,11,19,27,26,38,36,37,9,17,5,16,41,31,8,1,16,27,38,3,26,28,24,4,37,42,0,25,4,29,22,24,29,0,42,22,18,28,34,18,0,21,31,22,26,11,9,13,24,25,2,36,15,13,37,16,27,15,20,33,10,34,12,32,43,34,11,26,32,9,33,1,7,39,6,30,7,43,18,19,9,23,30,16,43,18,21,5,35,0,1,3,43,14,13,15,12,20,5,8,6,23,25,36,38,40,33,},
{7,40,32,36,29,24,20,25,12,29,30,31,5,41,38,43,16,23,9,13,3,28,16,13,17,31,12,18,32,0,44,38,26,28,39,12,27,39,13,4,28,15,31,37,25,30,34,32,2,6,40,8,30,5,9,4,19,27,32,22,23,10,22,19,25,4,5,37,6,44,43,20,26,41,35,6,14,44,15,35,35,17,29,1,24,42,29,36,14,15,33,41,15,27,36,4,1,21,43,38,16,11,41,1,8,18,40,34,36,23,14,9,10,8,33,5,1,2,20,21,13,39,11,2,10,6,2,37,7,14,0,11,42,22,28,34,26,33,40,11,18,20,42,19,27,23,0,21,44,10,16,31,7,42,3,24,8,30,9,43,26,0,12,34,18,25,22,3,33,35,38,21,17,3,24,39,17,37,7,19,},
{7,32,22,16,41,22,3,21,31,20,26,6,10,4,1,34,3,32,41,31,19,36,11,43,30,22,8,2,27,44,0,43,37,40,28,6,28,40,23,45,18,29,3,11,38,10,29,5,18,39,17,31,35,23,33,41,25,36,30,35,25,27,40,39,44,34,0,35,33,38,20,12,10,42,12,28,29,32,43,5,2,17,38,26,30,26,32,1,44,1,6,0,13,37,26,9,25,30,37,27,24,14,41,15,21,23,2,20,7,39,15,24,9,8,18,37,10,33,19,11,24,21,6,14,2,34,4,12,19,4,21,0,29,13,17,42,42,16,3,31,13,39,14,16,38,14,45,5,8,23,24,28,11,36,17,20,27,35,12,15,15,9,45,8,1,25,13,4,34,18,33,44,19,45,7,5,22,7,16,42,40,9,36,43,},
{5,27,18,6,12,28,37,23,34,43,4,19,16,31,39,18,22,29,2,30,0,25,22,32,7,40,45,0,22,6,29,45,21,9,31,33,26,8,19,32,24,37,20,40,38,13,44,20,1,16,37,25,11,17,27,19,25,35,26,31,22,43,34,25,29,12,26,3,35,44,13,28,26,0,30,3,9,20,2,13,11,10,39,19,8,29,30,28,5,7,15,4,44,36,1,33,10,39,27,42,14,5,15,12,9,14,18,16,24,0,13,35,17,1,31,21,16,21,7,4,21,46,4,18,28,8,14,3,46,5,9,40,23,43,8,36,15,41,2,46,17,14,38,27,38,44,23,33,41,10,1,12,11,36,35,39,24,20,38,3,41,10,6,32,37,42,40,34,41,24,46,45,15,45,33,2,23,11,17,36,6,43,7,42,32,30,42,34,},
{27,34,44,32,8,33,23,25,47,25,13,39,14,40,6,32,36,10,43,35,22,46,15,6,19,11,3,5,21,16,37,31,20,1,10,21,42,31,12,18,28,8,4,29,46,6,29,43,9,33,40,29,26,2,40,15,3,37,19,41,35,5,39,13,20,7,17,34,16,30,42,32,38,47,45,9,42,14,6,44,26,8,24,16,7,39,23,8,27,31,36,5,21,32,1,47,20,28,39,45,34,2,1,31,20,36,30,13,0,36,22,45,10,24,33,37,11,10,12,35,41,17,26,40,22,9,25,7,23,0,3,17,1,12,28,38,25,44,0,16,15,38,4,29,27,22,4,26,14,7,43,28,41,18,33,35,21,24,15,2,30,3,12,13,38,30,14,46,19,9,44,17,45,37,11,4,34,0,42,19,27,18,24,43,5,47,11,41,2,18,23,46,},
{41,14,12,22,3,28,7,13,39,10,30,46,12,38,1,39,48,20,42,12,45,34,8,47,20,14,40,23,30,15,46,1,33,9,5,38,8,11,19,42,29,2,43,21,12,9,17,34,0,11,3,4,24,16,25,1,0,22,27,6,21,37,33,7,13,48,24,44,11,44,35,38,29,44,24,43,47,9,31,32,4,46,6,29,15,42,43,10,33,14,0,26,30,45,40,6,13,18,16,48,37,28,13,45,41,44,27,22,14,26,36,40,25,1,48,39,10,18,36,20,7,37,2,23,35,19,42,47,33,36,41,19,32,22,8,15,46,43,5,11,31,38,47,17,32,37,27,29,25,15,36,30,3,8,35,17,2,40,28,3,27,39,6,23,26,0,45,32,4,21,9,31,34,18,10,21,18,26,16,17,5,41,23,25,34,20,7,2,19,35,5,31,4,16,24,28,},
{6,15,49,27,10,7,34,36,27,15,42,34,38,41,14,13,18,19,46,41,27,46,43,34,0,38,48,28,1,47,35,12,10,9,44,21,31,8,12,34,43,40,1,8,22,38,47,23,48,7,42,9,22,21,49,3,3,17,20,37,36,0,17,2,43,44,24,25,49,30,14,15,40,45,4,24,33,32,4,47,31,14,21,23,47,13,8,20,13,40,24,11,36,11,28,20,22,18,16,25,43,46,24,16,30,42,31,44,5,2,28,0,27,37,23,6,32,37,45,48,26,17,35,46,9,20,39,26,29,19,36,45,40,19,42,41,1,5,2,9,38,30,7,39,23,32,15,1,29,39,28,14,35,3,11,6,31,37,49,35,33,18,22,10,3,48,4,33,26,33,2,12,10,5,16,25,45,16,8,26,18,44,29,32,5,4,25,30,21,11,19,7,12,29,41,6,17,13,0,39,},
};

vector<graph> graphs;

void init() {

	for (int i = 0; i < 11; i++) {
        lsts.insert(lsts.begin(), std::vector<int>());
	}
    assert(lsts.size() == 51);
    for (int i = 0; i <= 50; i++) {
        graphs.push_back(graph());
        auto& g = graphs.back();
        g.E.resize(i);
        for (int j = 0; j < (int)lsts[i].size(); j += 4) {
            g.E[j / 4] = vector<int>(lsts[i].begin() + j, lsts[i].begin() + j + 4);
        }
    }
}

void solve(int cs) {
    int l, r;
    scanf("%d %d", &l, &r);
    int n = l + ((cs - 1) / 2) % (r - l + 1);
    if (n == 10) {
        solve10();
    } else {
        auto g = graphs[n];
        printf("%d\n", n);
        for (int i = 0; i < n; i++) {
            for (int j : g.E[i]) {
                if (j > i) {
                    printf("%d %d\n", i + 1, j + 1);
                }
            }
        }
        fflush(stdout);
        int nn;
        scanf("%d", &nn);
        if (nn == -1) {
            exit(0);
        }
        graph ng;
        ng.E.resize(n);
        for (int i = 0; i < 2 * n; i++) {
            int a, b;
            scanf("%d %d", &a, &b);
            --a, --b;
            ng.E[a].push_back(b);
            ng.E[b].push_back(a);
        }
        auto origByD = getByD(g);
        auto newByD = getByD(ng);
        map<vector<int>, int> origPerm;
        map<vector<int>, int> newPerm;
        vector<int> perm(n, -1);
        for (int i = 0; i < n; i++) {
            origPerm[origByD[i]] = i;
            newPerm[newByD[i]] = i;
        }
        assert(origPerm.size() == n);
        assert(newPerm.size() == n);
        for (const auto& vec : origByD) {
            auto origIt = origPerm.find(vec);
            auto newIt = newPerm.find(vec);
            assert(origIt != origPerm.end());
            assert(newIt != newPerm.end());
            int a = origIt->second;
            int b = newIt->second;
            perm[a] = b;
        }
        for (int i = 0; i < n; i++) {
            assert(perm[i] != -1);
            printf("%d ", perm[i] + 1);
        }
        printf("\n");
        fflush(stdout);
    }
}

int main(int argc, char* argv[]) {
    init();
    init10();
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++) {
        solve(i + 1);
    }
}
