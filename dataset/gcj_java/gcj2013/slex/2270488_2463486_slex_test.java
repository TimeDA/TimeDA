import static java.lang.Integer.parseInt;
 
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Scanner;
 import java.util.TreeSet;
 
 public class Test {
 
 	static boolean pali(String s){
 		int a = 0,b=s.length()-1;
 		while(a<b){
 			if(s.charAt(a)!=s.charAt(b))return false;
 			a++;b--;
 		}
 		return true;
 	}
 	
 	static boolean check(BigInteger b) {
 		//if(b.toString().length()>20)return false;
 		return pali(b.multiply(b).toString());
 	}
 	
 	static TreeSet<String>T= new TreeSet<String>();
 
 	
 	static int root(String s){
 		int res=0;
 		String revs = "";
 		for(char c:s.toCharArray())revs = c+revs;
 		String a = s+revs;
 		
 		
 		String b = s+revs.substring(1);
 		BigInteger ba = new BigInteger(a);
 		BigInteger bb = new BigInteger(b);
 		if(check(ba)){
 			T.add(ba.toString());
 		}
 		if(check(bb)){
 			T.add(bb.toString());
 		}
 		return res;
 	}
 	
 	static void gen2(){
 		for(int i=1;
 				i<50000000;i++){
 			if(i%1000000==0)System.err.println(i);
 			String s = Integer.toString(i, 2);
 		    root(s);
 		    root('2'+s.substring(1));
 		    root(s.substring(0,s.length()-1)+'2');
 		}
 		for(String s:T)System.out.println(s);
 		
 	}
 	
 	static int count(BigInteger x, ArrayList<BigInteger>A ){
 		int p = Collections.binarySearch(A,x);
 		if(p<0)return -p -1;
 		return p+1;
 	}
 	
 	public static void main(String[] args) throws Exception{
 		//gen2();
 		
 		
 		BufferedReader br = new BufferedReader(new FileReader(new File("numbers.out"))); //generated by the bruteforce above
 		String s;
 		ArrayList<BigInteger>A = new ArrayList<BigInteger>();
 		while((s=br.readLine()) != null){
 			BigInteger x = new BigInteger(s);
 			A.add(x.multiply(x));
 		}
 		Collections.sort(A);
 		Scanner scan = new Scanner(System.in);
 		int N = parseInt(scan.nextLine());
 		for(int i=0;i<N;i++){
 			int r=0;
 			BigInteger a = new BigInteger(scan.next());
 			BigInteger b = new BigInteger(scan.next());
 			r = count(b, A)-count(a.subtract(BigInteger.ONE), A);
 			System.out.format("Case #%d: %s\n",i+1,r);
 		}
 		
 	}
 }
